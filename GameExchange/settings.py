"""
Django settings for GameExchange project.

Generated by 'django-admin startproject' using Django 2.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
import time

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'f#efhtr5dqb0#@n81sb55e^%&wy7b2b3=1b6b(q-ml_s(xx@8w'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['XGame.pythonanywhere.com', '192.168.1.95']

AUTH_USER_MODEL = 'xgame.User'

# Application definition

INSTALLED_APPS = [
    'xgame.apps.XgameConfig',
    'django_mysql',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'fcm_django',
    'jet.dashboard',
    'jet',
    'django.contrib.admin',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'xgame.AuthMiddleware.AuthMiddleware'
]

FCM_DJANGO_SETTINGS = {
        "FCM_SERVER_KEY": "AAAAYNMFHZc:APA91bEiQDQBZlmq1fIQCFCRil7RKcLJon-rEhK7tA5ARUSAujdOMS0rDYfWpKe8gJxPL3S-hwOiJ2Pj8K-rdnDaBvSa6IelTy14h7xWBQd26fnEjLedDlJe1OOab2dElFAflQ-YZjqL",
        "ONE_DEVICE_PER_USER": True,
        "DELETE_INACTIVE_DEVICES": False,
}

ROOT_URLCONF = 'GameExchange.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'GameExchange.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'game_exchange',
        # 'NAME': 'XGame$game_exchange',
        'HOST': 'localhost',
        # 'HOST': 'XGame.mysql.pythonanywhere-services.com',
        'USER': 'root',
        # 'USER': 'XGame',
        'PASSWORD': '',
        # 'PASSWORD': 'qUTJYSJN8A69ADjsiiczNpBoSQDLlYdjlZhA5ZxDU89elo9gVR0cxtS00X4Vnrk0kRWa1baq8q8krohXu6UfjTz9XYXd9S0leO9V',
        'port': '3306',
        'OPTIONS': {
            'charset': 'utf8mb4',
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES', innodb_strict_mode=1"
        },
        'TEST': {
            'CHARSET': 'utf8mb4',
            'COLLATION': 'utf8mb4_unicode_ci',
        }
    }
}

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
)

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Iran'

USE_I18N = True

USE_L10N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue'
        }
    },
    'formatters': {
        'verbose': {
            'format': '{levelname}: {asctime}, {module}, {message}',
            'style': '{'
        },
        'simple': {
             'format': '{levelname} {message}',
             'style': '{'
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'level': 'INFO',
            'formatter': 'verbose'
        },
        'info_file': {
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(BASE_DIR + '/logs/info', 'info.log'),
            'formatter': 'verbose',
            'when': 'D',
            'backupCount': 30

        },
        'debug_file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(BASE_DIR + '/logs/debug', 'debug.log'),
            'formatter': 'verbose',
            'when': 'D',
            'backupCount': 30
        },
        'error_file': {
            'level': 'ERROR',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(BASE_DIR + '/logs/error', 'error.log'),
            'formatter': 'verbose',
            'when': 'D',
            'backupCount': 30
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'info_file', 'debug_file', 'error_file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

if DEBUG and os.environ.get('RUN_MAIN', None) != 'true':
    LOGGING = {}
